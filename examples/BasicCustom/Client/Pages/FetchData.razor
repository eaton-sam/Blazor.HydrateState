@page "/fetchdata"
@implements IDisposable
@inject StateProvider<WeatherState> WeatherStateProvider
@inject WeatherActions WeatherActions

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (!WeatherStateProvider.Value.Forecasts.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in WeatherStateProvider.Value.Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override void OnInitialized()
    {
        WeatherStateProvider.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        WeatherStateProvider.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!WeatherStateProvider.Value.Forecasts.Any())
        {
            await WeatherActions.GetForecasts();
        }
    }

}
